python3 -m venv venv
source venv/bin/activate.fish

python -m pip install --upgrade pip
pip install -r requirements.txt

python manage.py runserver_plus --cert-file cert.crt
docker run -it --rm --name redis -p 6379:6379 redis

С чем столкнулся по книге Django 4 Меле:
lsof -i :8000 - показать процессы и порты
sudo fuser -k 8000/tcp -удалить все процессы занимающие порт 8000

Запуск Celery:
celery -A myshop worker -l info

Запуск RabbitMQ:
docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:management


python manage.py shell
python manage.py showmigrations finance
python manage.py showmigrations kit
python manage.py makemigrations finance
python manage.py makemigrations kit
python manage.py migrate finance
python manage.py migrate kit
python manage.py migrate finrep 0138_auto_20250127_1639
python manage.py migrate finrep 0137_merge
python manage.py createsuperuser
python manage.py startapp core
python manage.py collectstatic
python manage.py runserver


pip install Django==2.2.19

python manage.py test -v 2
python manage.py test posts.tests.test_forms -v 2
python manage.py test posts.tests.test_views -v 2
python manage.py test posts.tests.test_urls -v 2

from i import *

http://127.0.0.1:8000/admin/
http://127.0.0.1:8000/auth/signup/
http://127.0.0.1:8000/auth/login/
http://127.0.0.1:8000/auth/password_change/
http://127.0.0.1:8000/auth/password_change/done/
http://127.0.0.1:8000/auth/password_reset/
http://127.0.0.1:8000/posts/46/


Для GitBash:
ssh-keygen
cat ~/.ssh/id_rsa.pub
ssh alekseikogan@158.160.30.17
ssh work_pc@158.160.30.17

sudo apt update
sudo apt upgrade -y
sudo apt install python3-pip python3-venv git -y
git clone https://github.com/alekseikogan/hw05_final.git
python3 -m venv venv
python -m pip install -r requirements.txt
python manage.py migrate
python manage.py runserver 0:8000 --insecure

pip install gunicorn				установите пакет gunicorn
gunicorn --bind 0.0.0.0:8000 yatube.wsgi	запустите Gunicorn
sudo nano /etc/systemd/system/gunicorn.service
sudo systemctl start gunicorn			запустить юнит gunicorn
sudo systemctl enable gunicorn			добавьте юнит gunicorn в список автозапуска операционной системы
sudo systemctl status gunicorn			проверить работоспособность запущеного демона

sudo apt install nginx -y			сервер nginx установлен
sudo ufw allow 'Nginx Full'			разрешит принимать запросы на порты — 80 и 443
sudo ufw allow OpenSSH				открывает порт 22 — это стандартный порт для соединения по SSH
sudo ufw enable					включите файрвол
sudo ufw status					проверьте внесённые изменения
sudo systemctl start nginx			запустите nginx
python manage.py collectstatic			вся статика будет собрана в директорию static/
sudo systemctl daemon-reload			перезапустить все службы
sudo systemctl restart gunicorn			запустить демона gunicorn после перезапуска
sudo systemctl status gunicorn			убедиться что gunicorn активен
sudo systemctl stop gunicorn
sudo nano /etc/nginx/sites-enabled/default	измените конфигурационный файл nginx
sudo nginx -t                             	нет ли синтаксических ошибок в конфиге
sudo systemctl reload nginx			перезапустите nginx, чтобы конфигурация вступила в силу
sudo systemctl status nginx
sudo fuser -k 80/tcp 				ВАЖНО - перезауптить порт 80

sudo apt install snapd				установка certbot
sudo snap install core; sudo snap refresh core
sudo snap install --classic certbot
sudo ln -s /snap/bin/certbot /usr/bin/certbot
sudo certbot --nginx				начать процесс получения сертификата
sudo apt install postgresql postgresql-contrib -y	необходимые для работы PostgreSQL пакеты
sudo systemctl stop postgresql			Остановить 
sudo systemctl start postgresql 		Запустить
sudo systemctl restart postgresql 		Перезапустить
sudo systemctl status postgresql 		Узнать статус, текущее состояние 
sudo -u postgres psql 				от имени пользователя postgres вызовите утилиту psql
scp dump.json alekseikogan@158.160.30.17:/home/alekseikogan/hw05_final/yatube/

sudo useradd -m -d /home/work_pc -s /bin/bash work_pc		добавить юзера
sudo su - work_pc				переключиться на него
echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDaDFNARNb1eCgR18qtWK+o0bpPWuLkKlhtkmrDH5+LnEmFFic5kHMfKwXl3+2/a2j/lMFvpbqqAI0R+v+JP9X70hgL7wu/Q7BaHh+uOXn279yETjvWm+0ov1I0gl40XIaqu23uCELjEej/qTY5yLKyiXKwgLdknF5ciJcfJoeTU1HUOxEGw5R3oYZraK2oQ2+pjyqT3IJunmxkGgLGWbax/0T1rR+QNvacuI8l+fV7qC/kXDaMCfSail5GzI4rI8kPTPlljULTis7WDeLnBJMiSD+Hp7Z1SLVkTDE42nTYXM4SCB9NQSH+GfqZvTIvHUdgK4Axr3u3MuT8snijiLx9O3HId8VRY5q5vmES8fSiNp0LIVTvvau9R0XWXHV07/Mu7ORIId9ZmZWmtqOHnsFQsQDcn6Yub4Axrub9sUpA71vzNCre4Q+FlM4mjAXTs7QiFHwYuBOk5jyAGDKPmkGYTjWn4Ld/cOy3Db/0qcF1t++jYOvkQm9/fJLaPNEgNfM= viam@hpEliteOne800" > /home/work_pc/.ssh/authorized_keys

Работа с контейнерами:
sudo docker container ls -a
sudo docker container stop <CONTAINER ID>
sudo docker container rm <CONTAINER ID>
sudo docker stop $(sudo docker ps -aq)


sudo docker image ls -a
sudo docker image rm <CONTAINER ID>
sudo docker images purge				Удаление образов, не привязанных к контейнеру
sudo docker rmi <IMAGE_ID>
sudo docker system prune

sudo docker-compose exec web python manage.py migrate
sudo docker-compose exec web python manage.py createsuperuser
sudo docker-compose exec web python manage.py collectstatic --no-input 

ПРОБЛЕМЫ:
1. Установка Pillow
sudo apt install libjpeg-dev zlib1g-dev
pip install Pillow==8.3.1
2. Установка debug-toolbar
python -m pip install django-debug-toolbar==3.2.4
3. Дамп джисона
python -Xutf8 ./manage.py dumpdata > data.json
4. Permission denied
sudo chmod o+x /home/alekseikogan
5. Установк прав
sudo chown -R alekseikogan:alekseikogan /home/alekseikogan/.ssh
sudo chmod 0700 /home/alekseikogan/.ssh
sudo chmod 0600 /home/alekseikogan/.ssh/authorized_keys
6. Закачка на сервер
scp -r d:/static alekseikogan@158.160.30.17:/home/alekseikogan/hw05_final/yatube
scp -r d:/media alekseikogan@158.160.30.17:/home/alekseikogan/hw05_final/yatube
scp -r d:/Dev/infra_sp2 alekseikogan@158.160.30.17:/home/alekseikogan/other
scp d:/Dev/foodgram-project-react/infra/docker-compose.yml alekseikogan@158.160.30.17:/home/alekseikogan
scp d:/Dev/foodgram-project-react/infra/nginx.conf alekseikogan@158.160.30.17:/home/alekseikogan


scp -r D:/Dev/yamdb_final/infra/docker-compose.yaml alekseikogan@158.160.30.17:/home/alekseikogan/
scp -r D:/Dev/yamdb_final/api_yamdb/static alekseikogan@158.160.30.17:/home/alekseikogan/

docker cp D:/Dev/yamdb_final/api_yamdb/static/redoc.yaml 1ac0003ba8ea:/app/static/


7. Зайти в контейнер
sudo docker exec -it <container_id> bash
Docker:
docker build -t infra_sp2 .				собрать образ
sudo docker image ls						список образов
sudo docker run --name yamdb -it -p 8000:8000 yamdb 		запуск контейнера					список контейнеров
sudo docker container stop <CONTAINER ID>			отсановить контейнер			

8. Работа с БД
sqlite3.exe db.sqlite3
.mode csv
.import ingredients.csv recipes_ingredient
.import ingredients.json recipes_ingredient

9. nginx порты заняты
sudo killall nginx
sudo netstat -tulpn
sudo fuser -k 80/tcp
sudo kill <process id>
sudo systemctl reload nginx
sudo systemctl start nginx
sudo systemctl status nginx

не точно:
sudo docker rm -fv
sudo docker system prune
sudo lsof -i -P -n | grep tcp4
sudo nginx -s stop
sudo docker image ls -a
sudo docker container ls -a

docker build -t alekseikogan/foodgram_backend:latest .
docker logs --follow <container_name>
